package com.home.algorithms.amz.medium

import spock.lang.Specification

class NumberOfIslandsTest extends Specification {

    def instance = new NumberOfIslands()

    def 'test dfs'() {
        given: 'grid'
        when: 'method called'
        def res = instance.numIslands(grid)

        then: 'check result'
        res == expected

        where:
        grid                           | expected
        [
          ['1', '1', '1', '1', '0'],
          ['1', '1', '0', '1', "0"],
          ['1', '1', '0', '0', "0"],
          ['0', '0', '0', '0', "0"]
        ] as char[][]                              | 1
        [
          ['1','1','0','0','0'],
          ['1','1','0','0','0'],
          ['0','0','1','0','0'],
          ['0','0','0','1','1']
        ] as char[][]                              | 3
        [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
         ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
         ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
         ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
         ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]] as char[][] | 1
    }
}
